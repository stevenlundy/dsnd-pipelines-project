Refactor countPOS to have nlp transformation in separate step
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
#
# On branch main
# Your branch is ahead of 'origin/main' by 10 commits.
#   (use "git push" to publish your local commits)
#
# Changes to be committed:
#	modified:   starter/starter.ipynb
#
# ------------------------ >8 ------------------------
# Do not modify or remove the line above.
# Everything below it will be ignored.
diff --git a/starter/starter.ipynb b/starter/starter.ipynb
index 24e5f70..15c243c 100644
--- a/starter/starter.ipynb
+++ b/starter/starter.ipynb
@@ -419,6 +419,23 @@
     "from sklearn.base import BaseEstimator, TransformerMixin"
    ]
   },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "class ApplyNLP(BaseEstimator, TransformerMixin):\n",
+    "    def __init__(self):\n",
+    "        pass\n",
+    "\n",
+    "    def fit(self, X, y=None):\n",
+    "        return self\n",
+    "\n",
+    "    def transform(self, X):\n",
+    "        return [nlp(doc) for doc in X]"
+   ]
+  },
   {
    "cell_type": "code",
    "execution_count": null,
@@ -426,22 +443,18 @@
    "outputs": [],
    "source": [
     "class CountPOS(BaseEstimator, TransformerMixin):\n",
-    "    def __init__(self, pos_tags):\n",
-    "        self.pos_tags = pos_tags\n",
+    "    def __init__(self, pos_tag):\n",
+    "        self.pos_tag = pos_tag\n",
     "\n",
     "    def fit(self, X, y=None):\n",
     "        return self\n",
     "\n",
     "    def transform(self, X):\n",
-    "        pos_counts = {pos: [] for pos in self.pos_tags}\n",
+    "        pos_counts = []\n",
     "        for doc in X:\n",
-    "            doc_pos_counts = {pos: 0 for pos in self.pos_tags}\n",
-    "            for token in nlp(doc):\n",
-    "                if token.pos_ in self.pos_tags:\n",
-    "                    doc_pos_counts[token.pos_] += 1\n",
-    "            for pos in self.pos_tags:\n",
-    "                pos_counts[pos].append(doc_pos_counts[pos])\n",
-    "        return pd.DataFrame(pos_counts)"
+    "            count = sum(1 for token in doc if token.pos_ == self.pos_tag)\n",
+    "            pos_counts.append(count)\n",
+    "        return pd.DataFrame({self.pos_tag: pos_counts})"
    ]
   },
   {
@@ -451,13 +464,25 @@
    "outputs": [],
    "source": [
     "# check whether different POS frequencies are associated with the target\n",
-    "\n",
+    "from sklearn.pipeline import FeatureUnion, Pipeline\n",
     "\n",
     "pos_tags = [\"ADJ\", \"NOUN\", \"VERB\", \"ADV\", \"ADP\", \"PRON\", \"DET\", \"NUM\"]\n",
     "\n",
     "\n",
-    "transformer = CountPOS(pos_tags)\n",
-    "X_pos = transformer.fit_transform(data[\"Review Text\"])\n",
+    "# Define the pipeline\n",
+    "pos_pipeline = Pipeline(\n",
+    "    [\n",
+    "        (\"apply_nlp\", ApplyNLP()),\n",
+    "        (\n",
+    "            \"pos_features\",\n",
+    "            FeatureUnion([(pos, CountPOS(pos)) for pos in pos_tags]),\n",
+    "        ),\n",
+    "    ]\n",
+    ")\n",
+    "# Use the pipeline to transform the review text\n",
+    "X_pos = pos_pipeline.fit_transform(data[\"Review Text\"])\n",
+    "# convert X_pos to dataframe\n",
+    "X_pos = pd.DataFrame(X_pos, columns=pos_tags)\n",
     "X_pos[\"Recommended IND\"] = data[\"Recommended IND\"].values"
    ]
   },
